{"mappings":"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","sources":["public/scripts/pomodoro.js"],"sourcesContent":["//Fetch play and pause button from DOM to check for timer start/pause/stop onclick events\r\nconst playBtn = document.getElementById(\"play-icon\");\r\nconst pauseBtn = document.getElementById(\"pause-icon\");\r\n\r\n//Fetch back and next buttons to reset and skip sessions\r\nconst backBtn = document.getElementById(\"back-icon\");\r\nconst nextBtn = document.getElementById(\"next-icon\");\r\n\r\n//Fetch session buttons to check for session changes onclick\r\nconst studyButton = document.getElementById(\"pomodoro-session-buttons--study\");\r\nconst restButton = document.getElementById(\"pomodoro-session-buttons--rest\");\r\nconst breakButton = document.getElementById(\"pomodoro-session-buttons--break\");\r\n\r\n//Fetch elements to calculcate times for next session\r\nconst nextBreakText = document.getElementById(\"next-break\");\r\nconst nextStudyText = document.getElementById(\"next-study\");\r\nconst nextRestText = document.getElementById(\"next-rest\");\r\n\r\nconst cycleNumber = document.getElementById(\"cycle-number\");\r\n//Fetch time remaining to update every second\r\nconst countdownTimer = document.getElementById(\"time-remaining\");\r\n\r\n//Fetch progress circle to update current time progressed every second\r\nconst progressCircle = document.getElementById(\"progress-circle\");\r\n\r\n//Define study, break, and rest times for each session, with default values\r\nconst studyMinutes = 25;\r\nlet studyTime = studyMinutes * 60;\r\n\r\nconst breakMinutes = 5;\r\nlet breakTime = breakMinutes * 60;\r\n\r\nconst restMinutes = 15;\r\nlet restTime = restMinutes * 60;\r\n\r\n//Set the current session name and the cycle number\r\nvar currentSession = \"study\";\r\nvar currentCycle = 1;\r\n\r\n//Calculate how many study sessions are completed in the pomodoro cycle (max 4)\r\nvar completedStudySessions = -1;\r\n\r\n//Define variable to set interval for the timer countdown function\r\nvar timerStart;\r\n\r\n//Triggered when a new session type is started, either from completion or a button onclick event\r\n//Specify the session type and whether it counts as a completed session \r\nfunction makeActiveSession(session, complete=true) {\r\n    var sessionList = document.getElementsByClassName(\"pomodoro-buttons\");\r\n    for (let item of sessionList) {\r\n        item.classList.remove(\"active-state\");\r\n    }\r\n    \r\n    session.classList.add(\"active-state\");\r\n\r\n    togglePlayPause(pauseBtn);\r\n\r\n    if (complete) {\r\n        sessionComplete();\r\n    }\r\n\r\n    if (session == restButton) {\r\n        currentSession = \"rest\";\r\n        renderTime(Math.floor(restTime / 60), restTime % 60);\r\n        progressCircle.style.stroke = \"#00B8D9\";\r\n    }\r\n\r\n    else if (session == breakButton) {\r\n        currentSession = \"break\";\r\n        renderTime(Math.floor(breakTime / 60), breakTime % 60);\r\n        progressCircle.style.stroke = \"#FFAB00\";\r\n    }\r\n\r\n    else {\r\n        currentSession = \"study\";\r\n        renderTime(Math.floor(studyTime / 60), studyTime % 60);\r\n        progressCircle.style.stroke = \"#6554C0\";\r\n    }\r\n}\r\n\r\n//Start and stop the timer on play/pause onclick event\r\nfunction togglePlayPause(btn) {\r\n    if (btn.id == \"play-icon\") {\r\n        playBtn.classList.add(\"hidden\");\r\n        pauseBtn.classList.remove(\"hidden\");\r\n\r\n        timerStart = setInterval(function() { updateCountdown(currentSession); }, 1000);\r\n    }\r\n    else {\r\n        pauseBtn.classList.add(\"hidden\");\r\n        playBtn.classList.remove(\"hidden\");\r\n        clearInterval(timerStart);\r\n    }\r\n}\r\n\r\n//Reset the current session in the Pomodoro cycle, but don't increment the completed sessions\r\nfunction resetSession() { \r\n    if(currentSession == \"study\") { completedStudySessions--; }\r\n    togglePlayPause(pauseBtn);\r\n    sessionComplete();\r\n}\r\n\r\n//Skip to the next session in the Pomodoro cycle, on the skip event\r\nfunction skipSession() {\r\n    switch(currentSession) {\r\n        case \"break\": \r\n            makeActiveSession(studyButton);\r\n            break;\r\n        case \"rest\": \r\n            makeActiveSession(studyButton);\r\n            currentCycle++;\r\n            cycleNumber.innerHTML = \"CYCLE \" + currentCycle;\r\n            break;\r\n        default: \r\n            if(completedStudySessions == 3) {\r\n                makeActiveSession(restButton);\r\n                completedStudySessions = 0;\r\n            }\r\n            else {\r\n                makeActiveSession(breakButton);\r\n            }\r\n    }\r\n}\r\n\r\n//Set a delay for one second (used for temporarily disabling transitions on reset events)\r\nfunction delay(time) {\r\n    return new Promise(resolve => setTimeout(resolve, time));\r\n  }\r\n\r\n//Reset session times and complete the progress circle, and increment the current session in the Pomodoro cycle\r\nfunction sessionComplete() {\r\n    progressCircle.style.strokeDashoffset = 0;\r\n    renderTime(0, 0);\r\n\r\n    studyTime = studyMinutes * 60;\r\n    breakTime = breakMinutes * 60;\r\n    restTime = restMinutes * 60;\r\n\r\n    clearInterval(timerStart);\r\n    pauseBtn.classList.add(\"hidden\");\r\n    playBtn.classList.remove(\"hidden\");\r\n\r\n    if(currentSession == \"study\") { completedStudySessions++; }\r\n    resetTimer();\r\n}\r\n\r\n//Reset the progress circle to 0%, and render the time back to the original session time\r\nfunction resetTimer() {\r\n    //Temporarily disable progress transition to reset timer, using a promise for delays\r\n    //Without this, when the session restarts, the progress circle rewinds all the way back around\r\n    progressCircle.classList.add(\"no-transition\");\r\n    progressCircle.style.strokeDashoffset = 1159;\r\n\r\n    delay(1000).then(() => progressCircle.classList.remove(\"no-transition\"));\r\n\r\n    let minutes;\r\n    let seconds;\r\n\r\n    switch(currentSession) {\r\n        case \"break\": \r\n            minutes = Math.floor(breakTime / 60);\r\n            seconds = breakTime % 60;\r\n            renderTime(minutes, seconds);\r\n            break;\r\n        case \"rest\": \r\n            minutes = Math.floor(restTime / 60);\r\n            seconds = restTime % 60;\r\n            renderTime(minutes, seconds);\r\n            break;\r\n        default: \r\n            minutes = Math.floor(studyTime / 60);\r\n            seconds = studyTime % 60;\r\n            renderTime(minutes, seconds);\r\n    }\r\n}\r\n\r\n//Update the countdown timer every second\r\nfunction updateCountdown(currentSession) {\r\n    \r\n    let minutes;\r\n    let seconds;\r\n\r\n    if (currentSession == \"break\") {\r\n        minutes = Math.floor(breakTime / 60);\r\n        seconds = breakTime % 60;\r\n\r\n        if (breakTime == 0) { sessionComplete(); }\r\n\r\n        else {\r\n            renderTime(minutes, seconds);\r\n            breakTime--;\r\n            progressCircle.style.strokeDashoffset = percentToOffset(timeToPercent(currentSession));\r\n        }\r\n    }\r\n\r\n    else if (currentSession == \"rest\") {\r\n        minutes = Math.floor(restTime / 60);\r\n        seconds = restTime % 60;\r\n\r\n        if (restTime == 0) { sessionComplete(); }\r\n\r\n        else {\r\n            renderTime(minutes, seconds);\r\n            restTime--;\r\n            progressCircle.style.strokeDashoffset = percentToOffset(timeToPercent(currentSession));\r\n        }\r\n    }\r\n\r\n    else {\r\n        minutes = Math.floor(studyTime / 60);\r\n        seconds = studyTime % 60;\r\n\r\n        if (studyTime == 0) { sessionComplete(); }\r\n\r\n        else {\r\n            renderTime(minutes, seconds);\r\n            studyTime--;\r\n            progressCircle.style.strokeDashoffset = percentToOffset(timeToPercent(currentSession));\r\n        }\r\n    }\r\n}\r\n\r\n//Render user-readable time format in DOM from calculated minutes and seconds\r\nfunction renderTime(minutes, seconds) {\r\n    //Update countdown timer given minutes and seconds parameters\r\n    seconds = seconds < 10 ? '0' + seconds : seconds;\r\n    countdownTimer.innerHTML = minutes + \":\" + seconds;\r\n\r\n    //Calculate the time for the next break\r\n    var nextBreak = moment().add(minutes, 'm').add(seconds, 's');\r\n    if (currentSession == \"rest\") {\r\n        nextBreak = nextBreak.add(studyMinutes, 'm');\r\n    }\r\n    nextBreakText.innerHTML = nextBreak.format('hh:mm a');\r\n\r\n    //Calculate the time for the next study session\r\n    var nextStudy = moment().add(minutes, 'm').add(seconds, 's');\r\n    nextStudyText.innerHTML = nextStudy.format('hh:mm a');\r\n}\r\n\r\n\r\n/*\r\ncompleted study sessions = 0\r\nstart of study 1 -> 115\r\n    (25 * 3) + (5 * 3)    +   (17:49)\r\n\r\ncompleted study sessions = 1\r\nstart of break 1 -> 90\r\n    (25 * 3) + (5 * 2)    +   (1:23)\r\nstart of study 2 -> 85\r\n    (25 * 2) + (5 * 2)    +   (17:49)\r\n\r\ncompleted study sessions = 2\r\nstart of break 2 -> 60\r\n    (25 * 2) + (5 * 1)    +   (1:23)\r\nstart of study 3 -> 55\r\n    (25 * 1) + (5 * 1)    +   (17:49)\r\n\r\ncompleted study sessions = 3   \r\nstart of break 3 -> 30\r\n    (25 * 1) + (5 * 0)    +   (1:23)\r\nstart of study 4 --> 25\r\n    (25 * 0) + (5 * 0)    +   (17:49)\r\n*/\r\n\r\n\r\n//Calculate what percent of session is complete, given the current time remaining\r\nfunction timeToPercent(currentSession) {\r\n    switch(currentSession) {\r\n        case \"break\": return (1 - (breakTime / (breakMinutes * 60)));\r\n        case \"rest\": return (1 - (restTime / (restMinutes * 60)));\r\n        default: return (1 - (studyTime / (studyMinutes * 60)));\r\n    }\r\n    \r\n}\r\n\r\n//Calculate the offset for the progress circle element, given the percent\r\nfunction percentToOffset(percent) {\r\n    return 1159 - 1159 * percent;\r\n}\r\n\r\n//Initialise a new study session with default time specified\r\nmakeActiveSession(studyButton);\r\nrenderTime(Math.floor(studyTime / 60), studyTime % 60);"],"names":[],"version":3,"file":"pomodoro.24d87240.js.map","sourceRoot":"/__parcel_source_root/"}